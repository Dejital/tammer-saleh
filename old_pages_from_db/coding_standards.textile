h1. Code Standards

h2. General style

* Indentation
** Use 2 spaces, no tabs.
** Line up arguments.
** Line up hash rockets.
** Indent all SQL statements.
** Indent all elements and erb in your views.
* Add a comment when you want to say _why_ you did something, not just _how_.
* All ternaries should fit on single lines.  Otherwise use if statements.
* All method names should be explicit and explanatory.
* Never use @!!@, @unless x.nil?@ or @! x.nil?@ unless there's a good reason to care about the value being @false@ instead of nil.
* "Exceptions should be exceptional" - do not use exceptions for expected behavior.
* No @if@, @begin@, etc on right hand side of expression.
* Never Fail Silently.  Never catch an exception without taking action.

h2. Models

* @created_at@ and @updated_at@, not @*_on@.
* Learn and be enlightened by the use of custom setters and callbacks.
* Any call to @find(:all,...)@ or @find(:first,...)@ should have its own finder method on the model.
* Any call to @find(:all,...)@ should be refactored to use @scope@.
* In general, learn @named_scope@ and use it extensively.  If the method can be a named_scope (within reason), it should be.
* Any finder method that takes a limit, order, group_by, etc, should take those as hash-options as the last argument.
* Never use the block form of an association declaration.  Define class methods on the associated class instead.
* Never validate code generated content - only validate user generated content.  ex:  validate password instead of hashed_password.

h3. Code Order

# Includes
# Subclass definitions
# 3rd party macros (acts_as_taggable, has_finder)
# Misc rails macros (attr_protected)
# Associations
# Callbacks
# Validation methods
# Validation macros
# Class methods (do _not_ use @class << self@)
# Instance methods 
# Private methods
# Validation and callback methods

h3. Migrations

* Anything that goes up, must come down
* Never use code from outside the migration.  Define AR classes in migration, if you want to use AR.
* Never change the @#up@ method of a committed migration.
* Test any migration you write, both the up, and the down: @rake db:migrate@, @rake db:migrate VERSION=XX@, @rake db:migrate@. Do this before you commit the migration.
* Modifying and seeding data through migrations is fine.  Stop whining.

h3. Schema

* All boolean columns should have default values and not null constraints.
* Default values on other columns are fine
* No other DB constraints allowed.

h3. SQL

* Indent all SQL correctly.
* Use hash syntax for all interpolated strings more than 2 vars or 2 lines.
* In the SQL where clause, "x = true" is unnecessary if you know x isn't null (see Migrations).  Just use "x" or "not x".
* Absolutely NO SQL outside the models.

h2. Controllers

* All REST all the time.  Extra actions in a RESTful controller are frowned upon, but not forbidden.
** Except for wizards with more than 2 steps and a confirmation.
** Prefer Javascript that consumes JSON through REST over RJS [experimental]
* @#index@ should handle searching.  Pass in either :term or :advanced hash of terms.
* Avoid domain logic in the controller at all costs.

h2. 3rd Party Code

* Gems in @/vendor/gems/[name]-[version]@
* Unpack all non-compiled gems into @/vendor/gems@.  
* Make use of @config.gem@ for all compiled gems.
* Unpack the latest stable version of rails in @/vendor/rails@
* _Never_ modify the source of a 3rd party plugin or gem.  Use extensions, patch and submit fixes to the author, or branch the source entirely.  When unpacking your version of a gem or plugin, prefix the name with your name: @/vendor/plugins/tsaleh_acts_as_taggable@.

h2. Libraries

* Duck punch files should be named @/lib/extensions/[model|plugin].rb@

h2. Deployment

* Deploy to @/home/appname/apps/appname/@
* Symlink @/home/appname/current@ to @/home/appname/apps/appname/current@
* Touch a file named @~/primary@ on the primary server (for cron tasks that should only run on one machine in the cluster).



