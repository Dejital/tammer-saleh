:textile
  h3. Recursive Fibonacci generator:

  <pre><code>f(n) = f(n - 1) + f(n - 2)
  </code></pre>

  |.n:   |0 |1 |2 |3 |4 |5 |6| 7| 8| 9|
  |.f(n):|0 |1 |1 |2 |3 |5 |8|13|21|34|

  So, for example, @f(7)@ should return the value 13

  Write a recursive version of @f(n)@.  We're not too worried about syntax, so use ruby or pseudocode or whatever.

  h3. Big O notation:

  What's the order (complexity, O(x), etc.) of the following snippets:

  <pre><code class="ruby">friendship_counts = users.map {|u| u.friends.inject(0) {|sum, f| sum + 1} }
  </code></pre>
    
  <pre><code class="ruby">User.all.sort_by(&:created_on).first(5)
  </code></pre>
    
  How would you refactor the second example?

  h3. Pointers

  !http://s3.amazonaws.com/tammer_saleh/production/images/38-original.jpg!

  Given the list above, and pretending that ruby does pointers (or just use pseudocode), write a method that finds and removes the node containing the data "Boomshakalaka".  Some more explanations:

  * List is a pointer to the first node.
  * In each node: 
  ** @N@ is a pointer to the next node
  ** @P@ is a pointer to the previous node
  ** @D@ is the data at that node.

  So, @List.N.N.D@ would return the data at the second node, and...

  <pre><code class="ruby">List.N.P = List
  List = List.N
  </code></pre>

  ...would chop off the first node.

